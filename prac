EXP 2 BFS DFS
from collections import deque

def bfs(graph, start, goal):
    queue = deque([(start, [start])])  # Queue stores (current_node, path_to_node)
    visited = set()
    
    while queue:
        node, path = queue.popleft()  # Get the first added node (FIFO order)
        
        if node == goal:
            return path  # Return path when goal is reached
        
        if node not in visited:
            visited.add(node)
            
            for neighbor in graph.get(node, []):
                if neighbor not in visited:
                    queue.append((neighbor, path + [neighbor]))
    
    return None  # No path found

# Define the directed graph as an adjacency list
graph = {
    'A': ['B', 'D'],
    'B': ['C', 'F', 'E'],
    'C': ['G'],
    'D': ['F'],
    'F': ['E'],
    'E': ['G'],
    'G': []
}

# Start BFS from 'A' to find a path to 'E'
path = bfs(graph, 'A', 'E')
print("Path from A to E:", path)

 
EXP 3 A* algo
from heapq import heappush, heappop

def astar(graph, start, goal):
    # Priority queue to store (f_score, node)
    open_set = []
    # Dictionary to store g_scores (path costs from start)
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
    # Dictionary to store parent nodes for path reconstruction
    came_from = {}
    
    # Initial node with f_score = g_score + h_score
    heappush(open_set, (g_score[start] + graph[start]['h'], start))
    
    while open_set:
        # Get node with lowest f_score
        current_f, current = heappop(open_set)
        
        # If goal is reached
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            path.reverse()
            return path, g_score[goal]
        
        # Check all neighbors
        for neighbor, cost in graph[current]['edges'].items():
            # Calculate tentative g_score
            tentative_g = g_score[current] + cost
            
            # If this path is better than previous one
            if tentative_g < g_score[neighbor]:
                # Update path
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g
                f_score = tentative_g + graph[neighbor]['h']
                heappush(open_set, (f_score, neighbor))
    
    return None, None

graph = {
    'S': {'h': 7, 'edges': {'A': 4, 'B': 10, 'C': 11}},
    'A': {'h': 8, 'edges': {'B': 8, 'D': 5}},
    'B': {'h': 6, 'edges': {'D': 15, 'C': 8}},
    'C': {'h': 5, 'edges': {'E': 20, 'F': 2}},
    'D': {'h': 5, 'edges': {'H': 16, 'I': 1, 'F': 1}},

   
    'E': {'h': 3, 'edges': {'G': 19}},
    'F': {'h': 3, 'edges': {'G': 13}},
    'G': {'h': 0, 'edges': {}},
    'H': {'h': 7, 'edges': {'I': 1, 'J': 2}},
    'I': {'h': 4, 'edges': {'J': 5, 'K': 13, 'G': 5}},
    'J': {'h': 5, 'edges': {'K': 7}},
    'K': {'h': 3, 'edges': {'G': 16}}
}

path, cost = astar(graph, 'S', 'G')
print(f"Path: {' -> '.join(path)}")
print(f"Total cost: {cost}")
 
EXP 4 8-Puzzle with A*
import copy
from heapq import heappush, heappop

class PuzzleState:
    def __init__(self, state, parent=None, action=None, cost=0):
        self.state = state
        self.parent = parent
        self.action = action
        self.cost = cost
        self.heuristic = self.manhattan_distance()
        
    def __lt__(self, other):
        return (self.cost + self.heuristic) < (other.cost + other.heuristic)
    
    def find_blank(self):
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    return i, j
    
    def manhattan_distance(self):
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.state[i][j] != 0:
                    x, y = divmod(self.state[i][j] - 1, 3)
                    distance += abs(x - i) + abs(y - j)
        return distance
    
    def is_goal(self):
        goal = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
        return self.state == goal
    
    def get_neighbors(self):
        neighbors = []
        moves = {
            'UP': (-1, 0),
            'DOWN': (1, 0),
            'LEFT': (0, -1),
            'RIGHT': (0, 1)
        }
        
        x, y = self.find_blank()
        
        for action, (dx, dy) in moves.items():
            new_x, new_y = x + dx, y + dy
            
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                new_state = copy.deepcopy(self.state)
                new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
                neighbors.append(PuzzleState(new_state, self, action, self.cost + 1))
                
        return neighbors

def solve_puzzle(initial_state):
    start = PuzzleState(initial_state)
    frontier = []
    heappush(frontier, start)
    explored = set()
    
    while frontier:
        current = heappop(frontier)
        
        if current.is_goal():
            path = []
            while current.parent is not None:
                path.append((current.action, current.state))
                current = current.parent
            return path[::-1]
        
        state_tuple = tuple(map(tuple, current.state))
        if state_tuple in explored:
            continue
            
        explored.add(state_tuple)
        
        for neighbor in current.get_neighbors():
            heappush(frontier, neighbor)
    
    return None

def print_state(state):
    for row in state:
        print(row)
    print()

def get_user_input():
    print("Enter the initial state of the 8-puzzle (use 0 for empty space)")
    print("Enter numbers row by row (space-separated)")
    initial_state = []
    for i in range(3):
        row = list(map(int, input(f"Enter row {i+1}: ").strip().split()))
        initial_state.append(row)
    return initial_state

def main():
    print("Welcome to 8-Puzzle Solver!")
    initial_state = get_user_input()
    
    print("\nInitial State:")
    print_state(initial_state)
    
    solution = solve_puzzle(initial_state)
    
    if solution:
        print("Solution found! Here are the steps:")
        current_state = initial_state
        for step, (action, new_state) in enumerate(solution, 1):
            print(f"\nStep {step}: {action}")
            print_state(new_state)
            current_state = new_state
    else:
        print("No solution found!")

if __name__ == "__main__":
    main()

 
EXP 5 Hanoi 
public class Tower {
    public static void towerOfHanoi(int n, String src, String helper, String des) {
        if(n == 1) {
            System.out.println("Transfer disk " + n  + " from tower " + src + " to " + des);
            return;
        }
        towerOfHanoi(n-1, src, des, helper);
        System.out.println("Transfer disk " + n + " from tower " + src + " to " + des);
        towerOfHanoi(n-1, helper, src, des);
    }
    public static void main(String args[]) {
        int n = 3;
        towerOfHanoi(n, "S", "H", "D");
    }
}
 
EXP 6 Knowledge base in prolog
%    pair(symbol,symbol)
     iskiller(symbol,symbol)
    male(symbol)
    female(symbol)
    isvictim(symbol)
    not_at_bar(symbol,symbol)
    not_at_beach(symbol,symbol)
    not_alone(symbol)
    twin(symbol,symbol)
    younger(symbol,symbol)
    child(symbol)
    
clauses    
    male(husband).
    male(brother).
    male(son).
    
    female(alice).
    female(daughter).
    
    twin(brother,alice).
    twin(son,daughter).
    
    child(son).
    child(daughter).
Medical Dignosis

% Facts: Symptoms associated with patients
has_symptom(patient1, fever).
has_symptom(patient1, cough).
has_symptom(patient2, headache).
has_symptom(patient2, fatigue).
has_symptom(patient3, cough).
has_symptom(patient3, sore_throat).
has_symptom(patient4, headache).
has_symptom(patient4, nausea).
has_symptom(patient5, fever).
has_symptom(patient5, chills).
has_symptom(patient6, sore_throat).
has_symptom(patient6, cough).

% Rules: Diagnoses based on symptoms
illness(flu) :- has_symptom(X, fever), has_symptom(X, cough), has_symptom(X, chills).
illness(cold) :- has_symptom(X, cough), has_symptom(X, sore_throat).
illness(migraine) :- has_symptom(X, headache), has_symptom(X, nausea).
illness(covid) :- has_symptom(X, fever), has_symptom(X, cough), has_symptom(X, chills), has_symptom(X, sore_throat).



Code 2:
% Facts about diseases
disease(flu).
disease(cold).
disease(pneumonia).

% Facts about symptoms
symptom(flu, fever).
symptom(flu, cough).
symptom(flu, fatigue).
symptom(cold, cough).
symptom(cold, sore_throat).
symptom(pneumonia, fever).
symptom(pneumonia, cough).
symptom(pneumonia, difficulty_breathing).

% Facts about patient symptoms
has_symptom(john, fever).
has_symptom(john, cough).
has_symptom(john, fatigue).

has_symptom(mary, cough).
has_symptom(mary, sore_throat).

% Rules for diagnosis
diagnosis(Patient, flu) :-
    has_symptom(Patient, fever),
    has_symptom(Patient, cough),
    has_symptom(Patient, fatigue).

diagnosis(Patient, cold) :-
    has_symptom(Patient, cough),
    has_symptom(Patient, sore_throat).

diagnosis(Patient, pneumonia) :-
    has_symptom(Patient, fever),
    has_symptom(Patient, cough),
    has_symptom(Patient, difficulty_breathing).
 
EXP 7 fwd chaining for medical using prolog
% Facts defining initial symptoms 
symptom_present(fever). 
symptom_present(cough). 
% Forward chaining rules for medical diagnosis 
diagnose :- 
 symptom_present(fever), 
 symptom_present(cough), 
 assert(disease(flu)), 
 write('The patient may have flu.'), nl. 
diagnose :- 
 symptom_present(sneezing), 
 symptom_present(runny_nose), 
 assert(disease(common_cold)),
 write('The patient may have common cold.'), nl. 
diagnose :- 
 symptom_present(fever), 
 symptom_present(cough), 
 symptom_present(loss_of_taste), 
 assert(disease(covid_19)), 
 write('The patient may have COVID-19.'), nl. 
% Sample Query 
% ?- diagnose. 
 
EXP 8 Bayesian reasoning for probabilistic inference for Weather prediction.
import numpy as np

def bayesian_update(prior, likelihood, evidence):
    """
    Perform Bayesian update.
    
    :param prior: Prior probability P(H)
    :param likelihood: Likelihood P(E|H)
    :param evidence: Total probability P(E)
    :return: Posterior probability P(H|E)
    """
    return (likelihood * prior) / evidence

# Get user input for prior probabilities
prior_sunny = float(input("Enter prior probability of a sunny day: "))
prior_rainy = float(input("Enter prior probability of a rainy day: "))

# Get user input for likelihoods
likelihood_sunny = float(input("Enter likelihood of seeing a clear sky given a sunny day: "))
likelihood_rainy = float(input("Enter likelihood of seeing a clear sky given a rainy day: "))

# Compute total probability of the evidence (marginal likelihood)
evidence = (likelihood_sunny * prior_sunny) + (likelihood_rainy * prior_rainy)

# Compute posterior probabilities
posterior_sunny = bayesian_update(prior_sunny, likelihood_sunny, evidence)
posterior_rainy = bayesian_update(prior_rainy, likelihood_rainy, evidence)

print(f"Updated probability of a sunny day given clear sky: {posterior_sunny:.2f}")
print(f"Updated probability of a rainy day given clear sky: {posterior_rainy:.2f}")
 
EXP 9 Implement a rule-based AI to play a Tic-Tac-Toe game.

% Define winning conditions win(Player, Board) :-
(Board = [Player, Player, Player, _, _, _, _, _, _]);
(Board = [_, _, _, Player, Player, Player, _, _, _]);
(Board = [_, _, _, _, _, _, Player, Player, Player]);
(Board = [Player, _, _, Player, _, _, Player, _, _]);
(Board = [_, Player, _, _, Player, _, _, Player, _]);
(Board = [_, _, Player, _, _, Player, _, _, Player]);
(Board = [Player, _, _, _, Player, _, _, _, Player]);
(Board = [_, _, Player, _, Player, _, Player, _, _]).

% Check if position is free free(Position, Board) :-
nth0(Position, Board, empty).

% Find winning move for AI
winning_move(Board, Player, Move) :- free(Move, Board),
nth0(Move, Board, Player, NewBoard), win(Player, NewBoard).

% Find blocking move to prevent opponent from winning blocking_move(Board, Move) :-
winning_move(Board, o, Move).

% Take the center if available center_move(Board, Move) :-
nth0(4, Board, empty), Move = 4.

% Take a corner if available corner_move(Board, Move) :-
member(Move, [0, 2, 6, 8]), nth0(Move, Board, empty).

% Pick first available move as fallback first_available(Board, Move) :-
nth0(Move, Board, empty).

% AI move: Prioritize winning, blocking, center, corner, and fallback best_move(Board, Move) :-
(winning_move(Board, x, Move), !); (blocking_move(Board, Move), !); (center_move(Board, Move), !); (corner_move(Board, Move), !); first_available(Board, Move).
